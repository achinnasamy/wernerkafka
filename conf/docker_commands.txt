Docker Commands


[1] $ docker images
Lists all the images

[2] $ docker images -f dangling=true
Shows all the images that are not having a tag name.

[3] Build a docker image from a docker file.
$ docker build --tag="pyspark-docker" docker_images
$ docker build --tag="bigchaindbtag" bigchaindb


[4] $ docker build -f /path_to/docker_file
Build a docker file that is anywhere in the file system.

[5] $ docker rmi <<image_id>>
Remove an image

$ docker rmi -f <<image_id>>
To force remove an image

[6] $ docker --version
Retrieves the version of the docker

[7] $ docker stats
Lists all the running containers

[8] $ docker system prune
Docker provides a single command that will clean up any resources — images, containers, volumes, and networks — that are dangling (not associated with a container)

[9] $ docker system prune -a
To additionally remove any stopped containers and all unused images (not just dangling images), add the -a flag to the command.

[10] $ docker run -it pyspark-docker bash
To login in into the image as a ssh shell. Bash shell into the pyspark-docker image.

[11] $ docker ps - list the running containers


[12] $ docker ps -a 
List all the containers that have been stopped also.


[13] $ docker rm <<container_id>> 
To remove a container


[14]
To remove all containers and images you can run these commands
docker rm $(docker ps -a -q) docker rmi $(docker images -q)


[15]
docker kill [container]: Kill a particular container.
docker kill $(docker ps -q): Kill all containers that are currently running.
docker rm [container]: Delete a particular container that is not currently running.
docker rm $(docker ps -a -q): Delete all containers that are not currently running.



[16] Blockchain
Install bigchaindb(BigChainDB) - For Installing bigchaindb run the below two commands

$ docker pull bigchaindb/bigchaindb:all-in-one

$ docker run \
  --detach \
  --name bigchaindb \
  --publish 9984:9984 \
  --publish 9985:9985 \
  --publish 27017:27017 \
  --publish 26657:26657 \
  --volume $HOME/bigchaindb_docker/mongodb/data/db:/data/db \
  --volume $HOME/bigchaindb_docker/mongodb/data/configdb:/data/configdb \
  --volume $HOME/bigchaindb_docker/tendermint:/tendermint \
  bigchaindb/bigchaindb:all-in-one


[] To install apache zeppelin as docker run the below command
$ docker run -p 8080:8080 --rm --name zeppelin apache/zeppelin:0.8.2

[] Creating a docker file - Dockerfile -  Commands


[] Fetch mysql data

https://hub.docker.com/r/genschsa/mysql-employees/

$ docker run -d --name mysql-employees -p 3306:3306 -e MYSQL_ROOT_PASSWORD=college -v $PWD/data:/var/lib/mysql genschsa/mysql-employees 



[] Docker Machine

$ brew install docker docker-machine 
$ brew cask install virtualbox

-> need password
-> possibly need to address System Preference setting 
$ docker-machine create --driver virtualbox default 
$ docker-machine env default 
$ eval "$(docker-machine env default)" 
$ docker run hello-world 
$ docker-machine stop default

Ref: https://medium.com/@yutafujii_59175/a-complete-one-by-one-guide-to-install-docker-on-your-mac-os-using-homebrew-e818eb4cfc3

********************************************************************************************************************************************
********************************************************************************************************************************************
********************************************************************************************************************************************
                                                                Kubernetes
********************************************************************************************************************************************
********************************************************************************************************************************************
********************************************************************************************************************************************

Kubernetes Commands

[1] Create a namespace 
    $ kubectl create ns all-monitoring

[2] Delete a namespace
    $ kubectl delete ns all-monitor

[3] Change the default namespace from default to viasocket
    $ kubectl config set-context --current --namespace=viasocket
    
[4] Get details about hpa (Horizontal Pod Autoscaling)
$ kubectl get hpa


[] Run a busy box
$ kubectl run -i -tty load-generator --image=busybox /bin/sh


newrelic-bundle-kube-state-metrics                                     21m
newrelic-bundle-newrelic-infrastructure                                21m
newrelic-bundle-newrelic-logging                                       21m
newrelic-bundle-nri-kube-events                                        21m
newrelic-bundle-nri-metadata-injection                                 21m
newrelic-bundle-nri-prometheus                                         21m

kubectl delete clusterrole newrelic-bundle-kube-state-metrics
kubectl delete clusterrole newrelic-bundle-newrelic-infrastructure
kubectl delete clusterrole newrelic-bundle-newrelic-logging
kubectl delete clusterrole newrelic-bundle-nri-kube-events
kubectl delete clusterrole newrelic-bundle-nri-metadata-injection
kubectl delete clusterrole newrelic-bundle-nri-prometheus


kubectl delete clusterrolebinding newrelic-bundle-kube-state-metrics
kubectl delete clusterrolebinding newrelic-bundle-newrelic-infrastructure
kubectl delete clusterrolebinding newrelic-bundle-newrelic-logging
kubectl delete clusterrolebinding newrelic-bundle-nri-kube-events
kubectl delete clusterrolebinding newrelic-bundle-nri-metadata-injection
kubectl delete clusterrolebinding newrelic-bundle-nri-prometheus

kubectl delete mutatingwebhookconfiguration newrelic-bundle-nri-metadata-injection



****************************************************************************************************************************************
Hive Commands
****************************************************************************************************************************************


create database warehousetwitter;

show databases;

use warehousetwitter;

CREATE EXTERNAL TABLE TWITTER_DATA(id STRING,data STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LOCATION '/siva';


INSERT INTO TWITTER_DATA("11101", "tweet me")

CREATE EXTERNAL TABLE AUTH_TABLE_DATA(aua STRING,sa STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LOCATION '/';

INSERT INTO AUTH_TABLE_DATA("11101", "REF")
SELECT * FROM `default`.`auth_table_data` LIMIT 100;


CREATE TABLE AUTH_DETAIL(aua STRING,sa STRING,res_dist_name STRING, res_state_code STRING, res_state_name STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LOCATION '/test';

CREATE TABLE AUTH_DATA(aua STRING,sa STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LOCATION '/vishal/data';

SELECT * FROM `default`.`auth_data` LIMIT 100;

describe tanner

select count(*) from tanner;
select count(*) from auth_detail

LOAD data <LOCAL> inpath <file path> into table [tablename]

hive ‐e 'select a.col from tab1 a'

select aua, count(*) from auth_detail group by aua
select * from auth_detail order by aua
select * from auth_detail sort by res_state_code

INSERT OVERWRITE DIRECTORY '/test/data' select res_state_code from auth_detail sort by res_state_code
INSERT OVERWRITE DIRECTORY '/test/dataparquet' STORED AS PARQUET select res_state_code from auth_detail sort by res_state_code

GROUP BY,  ORDER BY, SORT BY

Expressions in WHERE and HAVING



Creating a database CREATE DATABASE datamart;   				CREATE DATABASE datamart;


Selecting a database 							USE datamart;

Listing databases SHOW DATABASES; SHOW DATABASES;

Listing tables in a database SHOW TABLES; SHOW TABLES;

Describing the format of a table DESCRIBE table; DESCRIBE (FORMATTED|EXTENDED) table;


Dropping a database DROP DATABASE db_name; DROP DATABASE db_name (CASCADE);


Retrieving information SELECT from_columns FROM table WHERE conditions; SELECT from_columns FROM table WHERE conditions;

All values SELECT * FROM table; SELECT * FROM table;
Some values SELECT * FROM table WHERE rec_name = “value”; SELECT * FROM table WHERE rec_name = "value";
Multiple criteria SELECT * FROM table WHERE rec1=”value1” AND
rec2=”value2”;
SELECT * FROM TABLE WHERE rec1 = "value1" AND 
rec2 = "value2";
Selecting specific columns SELECT column_name FROM table; SELECT column_name FROM table;
Retrieving unique output records SELECT DISTINCT column_name FROM table; SELECT DISTINCT column_name FROM table;
Sorting SELECT col1, col2 FROM table ORDER BY col2; SELECT col1, col2 FROM table ORDER BY col2;
Sorting backward SELECT col1, col2 FROM table ORDER BY col2 DESC; SELECT col1, col2 FROM table ORDER BY col2 DESC;
Counting rows SELECT COUNT(*) FROM table; SELECT COUNT(*) FROM table;
Grouping with counting SELECT owner, COUNT(*) FROM table GROUP BY 
owner;
SELECT owner, COUNT(*) FROM table GROUP BY 
owner;
Maximum value SELECT MAX(col_name) AS label FROM table; SELECT MAX(col_name) AS label FROM table;
Selecting from multiple tables
(Join same table using alias
w/”AS”)
SELECT pet.name, comment FROM pet, event WHERE 
pet.name = event.name;
SELECT pet.name, comment FROM pet JOIN event ON 
(pet.name = event.name);



